<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">

    <display-name>Vaadin Web Application</display-name>

    <context-param>
        <description>Vaadin production mode</description>
        <param-name>productionMode</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>/WEB-INF/spring/app-config.xml</param-value>
    </context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Listener that exposes the request to the current thread (mainly for use with third-party servlets) 
		 Tells the web application that Spring will be sticking its nose into the HttpServletRequest object, and through that, the HttpSession object as well. 
		 If you use Spring MVC's dispatcherServlet, this is handled automatically, without it, define this RequestContextListener -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

    <servlet>
        <servlet-name>VaadinSpringAppServlet</servlet-name>
        <servlet-class>be.faros.vaadin.ui.VaadinSpringAppServlet</servlet-class>
        <init-param>
            <param-name>applicationBean</param-name>
            <param-value>myVaadinApplication</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>VaadinSpringAppServlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

</web-app>